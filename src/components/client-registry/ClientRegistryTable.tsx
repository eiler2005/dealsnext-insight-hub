
import { Table, TableHeader, TableBody, TableCell, TableRow, TableHead } from "@/components/ui/table";
import { Button } from "@/components/ui/button";

type Client = {
  id: string;
  name: string;
  manager: string;
  profit: string;
  deals: number;
  sla: string;
  lastContact: string;
  status: string;
  custom: string;
  segment?: string;
  region?: string;
};

// –î–æ–±–∞–≤–∏–º segment –∏ region –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–¥–µ–º–æ)
const clients: Client[] = [
  {
    id: "1",
    name: "–û–û–û ‚Äú–§–∏–Ω–¢–µ—Ö–ü–ª—é—Å‚Äù",
    manager: "–ò. –ò–≤–∞–Ω–æ–≤",
    profit: "‚ÇΩ1 250 000",
    deals: 8,
    sla: "92%",
    lastContact: "2025-06-03",
    status: "–ê–∫—Ç–∏–≤–Ω—ã–π",
    custom: "‚Äî",
    segment: "–§–∏–Ω–¢–µ—Ö",
    region: "msk"
  },
  {
    id: "2",
    name: "–ê–û ‚Äú–ì–ª–æ–±–∞–ª–¢–æ—Ä–≥‚Äù",
    manager: "–ê. –°–º–∏—Ä–Ω–æ–≤–∞",
    profit: "‚ÇΩ420 000",
    deals: 3,
    sla: "76%",
    lastContact: "2025-04-20",
    status: "–ü–æ–¥ —Ä–∏—Å–∫–æ–º",
    custom: "–°–ø–µ—Ü. —É—Å–ª–æ–≤–∏—è",
    segment: "–ì–ª–æ–±–∞–ª",
    region: "spb"
  },
  {
    id: "3",
    name: "–ó–ê–û ‚Äú–°–µ–≤–µ—Ä–°—Ç—Ä–æ–π‚Äù",
    manager: "–î. –ì—Ä–∏–Ω–µ–≤",
    profit: "‚ÇΩ0",
    deals: 0,
    sla: "‚Äî",
    lastContact: "2025-01-14",
    status: "–ó–∞–º–æ—Ä–æ–∂–µ–Ω",
    custom: "‚Äî",
    segment: "–°–µ–≤–µ—Ä",
    region: "ural"
  }
];

import React from "react";

// VIP/—Ä–∏—Å–∫–æ–≤–æ—Å—Ç—å + —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–∞–≤–∏–ª–æ–º –¥–ª—è demo
const CLIENT_MARKERS: Record<string, React.ReactNode> = {
  "–û–û–û ‚Äú–§–∏–Ω–¢–µ—Ö–ü–ª—é—Å‚Äù": <span title="VIP" className="ml-1 text-xl align-middle">üî•</span>,
  "–ê–û ‚Äú–ì–ª–æ–±–∞–ª–¢–æ—Ä–≥‚Äù": <span title="–ü–æ–¥ —Ä–∏—Å–∫–æ–º" className="ml-1 text-xl align-middle">‚ö†Ô∏è</span>,
  "–ó–ê–û ‚Äú–°–µ–≤–µ—Ä–°—Ç—Ä–æ–π‚Äù": <span title="–û—Å—Ç—ã–≤—à–∏–π" className="ml-1 text-xl align-middle">‚ùÑÔ∏è</span>,
};

function statusClass(status: string) {
  if (status.includes("—Ä–∏—Å")) return "text-rose-600 font-bold";
  if (status.includes("–ê–∫—Ç–∏–≤–Ω—ã–π")) return "text-green-700 font-bold";
  if (status.includes("–ó–∞–º–æ—Ä–æ–∂–µ–Ω")) return "text-slate-500 font-semibold";
  return "";
}

export default function ClientRegistryTable({ filterManager, filterSegment, filterRegion, filterSearch }: {
  filterManager?: string;
  filterSegment?: string;
  filterRegion?: string;
  filterSearch?: string;
}) {
  // –≠–º—É–ª–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
  let filtered = clients;
  if (filterManager) filtered = filtered.filter(c => c.manager === filterManager);
  if (filterRegion) filtered = filtered.filter(c => c.region === filterRegion);
  if (filterSegment) filtered = filtered.filter(c => c.segment === filterSegment);
  if (filterSearch) {
    filtered = filtered.filter(
      c =>
        c.name.toLowerCase().includes(filterSearch.toLowerCase()) ||
        c.manager.toLowerCase().includes(filterSearch.toLowerCase())
    );
  }

  return (
    <div className="rounded-xl border shadow bg-white/70 dark:bg-slate-900/60 overflow-x-auto">
      <table className="w-full caption-bottom text-sm">
        <thead>
          <tr>
            <th>–ö–ª–∏–µ–Ω—Ç</th>
            <th>–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
            <th>–ü—Ä–∏–±—ã–ª—å</th>
            <th>–°–¥–µ–ª–æ–∫</th>
            <th>SLA</th>
            <th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–ò–Ω–¥. —É—Å–ª–æ–≤–∏—è</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {filtered.map(client => (
            <tr key={client.id} className="hover:bg-accent/40 cursor-pointer transition-all">
              <td>
                <span>{client.name}</span>
                {CLIENT_MARKERS[client.name]}
              </td>
              <td>{client.manager}</td>
              <td>{client.profit}</td>
              <td>{client.deals}</td>
              <td>{client.sla}</td>
              <td>{client.lastContact}</td>
              <td className={statusClass(client.status)}>{client.status}</td>
              <td>
                {client.custom === "‚Äî"
                  ? <span className="text-muted-foreground">‚Äî</span>
                  : <span className="inline-block bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200 rounded px-2 py-0.5 text-xs">{client.custom}</span>}
              </td>
              <td>
                <button className="px-3 py-1 text-xs rounded bg-slate-100 hover:bg-slate-200 font-medium">–û—Ç–∫—Ä—ã—Ç—å</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {/* –ü—Ä–æ—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ */}
      <div className="flex items-center justify-between px-4 py-3 border-t text-xs bg-white/60 dark:bg-slate-900/40">
        <span>–ü–æ–∫–∞–∑–∞–Ω–æ {filtered.length > 0 ? `1‚Äì${filtered.length} –∏–∑ ${filtered.length}` : "0"} </span>
        <div className="flex gap-2">
          <Button variant="outline" size="sm" disabled>–ù–∞–∑–∞–¥</Button>
          <Button variant="outline" size="sm" disabled>–í–ø–µ—Ä—ë–¥</Button>
        </div>
      </div>
    </div>
  );
}
